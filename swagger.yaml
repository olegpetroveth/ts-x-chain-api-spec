openapi: 3.0.0
info:
  title: Thorswap Composable Router API
  description: Swap between any assets to any other asset, 
  version: 0.0.1

servers:
  - url: http://api.thorswap-example.io/v1
    description: Main (production) server
  - url: http://staging-api.thorswap-example.io/v1
    description: Internal staging server for testing

paths:
  # INFO
  /health:
    get:
      summary: Returns current health of the server
      responses:
        '201':
          description: Ready
        '300':
          description: Not ready

  /providers:
    get:
      summary: List of available liquidity sources on Thorswap
      responses:
        '200':
          description: A JSON array of liquidity sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiquiditySource'
      
  /tokens:
    get:
      summary: List of tokens available for swap on Thorswap
      responses:
        '200':
          description: A JSON array of tokens
          content:
            application/json:
              schema:
                # Either this, or {[network]: [...tokens]}
                type: array
                items:
                  $ref: '#/components/schemas/Token'

  # SWAP
  /quote:
    get:
      summary: Returns a quote for the best aggregated swap between two assets, given input parameters
      parameters:
        - name: sellToken
          in: query
          required: true
          description: Token to sell
          schema:
            type: string
        - name: buyToken
          in: query
          required: true
          description: Token to buy
          schema:
            type: string
        - name: amount
          in: query
          required: true
          description: Amount of sellToken to sell
          schema:
            type: number
        # affiliateFeeBps
        - name: protocols
          in: query
          required: false
          description: Specify liquidity protocols to use (comma-separated). If not set, all liquidity protocols will be used
          schema:
            type: string
        - name: complexityLevel
          in: query
          required: false
          description: >
            Maximum number of hops to be used in a transaction.
            The more is used — the longer route estimation will take, the more complex route might be as a result.
            Default: 2
          schema:
            type: integer
      responses:
        '200':
          description: Best available quote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        '400':
          description: Insufficient liquidity, Cannot estimate, etc
  
    # /quotes:
    #   get:
    #     summary: Returns the best N quotes for a swap

  /swap:
    get:
      # Consideration:
      # Do we want to take 'quoteId' here, and require the user to generate a quote before initiating a swap?
      # If not, we need to include things like 'providers' in request to make sure the swap follows the same path as quoted 
      summary: Generates data for calling the Thorswap router
      parameters:
        - name: sellToken
          in: query
          required: true
          description: Token to sell
          schema:
            type: string
        - name: buyToken
          in: query
          required: true
          description: Token to buy
          schema:
            type: string
        - name: amount
          in: query
          required: true
          description: Amount of sellToken to sell
          schema:
            type: number
        - name: slippage
          in: query
          required: true
          description: Limit of price slippage you are willing to accept, as a percentage
          schema:
            type: number
        - name: protocols
          in: query
          required: false
          description: Specify liquidity protocols to use (comma-separated). If not set, all liquidity protocols will be used
          schema:
            type: string
        - name: complexityLevel
          in: query
          required: false
          description: >
            Maximum number of hops to be used in a transaction.
            The more is used — the longer route estimation will take, the more complex route might be as a result.
            Default: 2
          schema:
            type: integer
        - name: destAddress
          in: query
          required: false
          description: >
            Recipient address for the purchased token. If not set, fromAddress receives the output.
            If not set and output is on a different network, swap fails.
          schema:
            type: string
        - name: affiliateAddress
          in: query
          required: false
          description: Destination address for the affiliate fee output
          schema:
            type: string
        - name: affiliateFeeBps
          in: query
          required: false
          description: Fee that the affiliate receives for the swap, in basis-points (1bp=0.01%)
          schema:
            type: integer
      responses:
        '200':
          description: Data required to proceed with a swap from the frontend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwapData'

  # We'll want to keep track of ongoing swaps, so we can provide the user with status updates (e.g. Rango)
  # so something like /swap/initiate, /swap/{id}/status

  # We can also expose something like /swap/proceed, where we accept signed transactions and submit them to the relevant network on the user's behalf

components:
  schemas:
    LiquiditySource:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        logoURI:
          type: string
      required:
        - id
        - title

    Token:
      type: object
      properties:
        # Either 'ETH.XXX' symbols, or we use a separate 'network' property
        # Consideration: If 'ETH.XXX' format, then how do we express arbitrary contract addresses?
        symbol:
          description: The symbol representing the token
          type: string
        name:
          description: A human-friendly name for the token
          type: string
        address:
          description: The smart contract address of the token
          type: string
        decimals:
          description: The number of decimals needed to represent the token
          type: integer
        logoURL:
          description: A link to the token's logo
          type: string
      required:
        - symbol
        - name
        - address
    
    Quote:
      type: object
      properties:
        sellToken:
          $ref: '#/components/schemas/Token'
        buyToken:
          $ref: '#/components/schemas/Token'
        sellAmount:
          type: number
        buyAmount:
          type: number
        route:
          type: array
          items:
            $ref: '#/components/schemas/Hop'
        estimatedFee:
          description: Estimated total fees for the swap
          type: number
        estimatedSlippage:
          type: number
        timestamp:
          description: Time that the quote was calculated
          type: string
        validFor:
          description: How long, from timestamp, until the quote should be considered stale (in seconds)
          type: number
        recommendedSlippageSetting:
          type: number
    
    Hop:
      type: object
      properties:
        sellToken:
          type: string
        buyToken:
          type: string
        sellAmount:
          type: number
        buyAmount:
          type: number
        provider:
          $ref: '#/components/schemas/LiquiditySource'
        estimatedFee:
          description: Estimated fee for the hop
          type: number
        description:
          description: Human-readable string describing the hop in detail
        transactionData:
          $ref: '#/components/schemas/TransactionData'
      required:
        - fromToken
        - toToken
        - fromTokenAmount
        - toTokenAmount
        - provider
    
    TransactionData:
      description: Data required to actually initiate the call from the frontend
      type: object
      # Shape will differ depending on the network
      # e.g. For Ethereum:
      properties:
        from:
          type: string
        to:
          type: string
        data:
          type: string
        value:
          type: string
        gasPrice: 
          type: string
        gas:
          type: string
    
    SwapData:
      type: object
      properties:
        fromToken:
          $ref: '#/components/schemas/Token'
        toToken:
          $ref: '#/components/schemas/Token'
        hops:
          type: array
          items:
            $ref: '#/components/schemas/Hop'